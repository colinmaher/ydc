head	1.10;
access;
symbols;
locks;
comment	@// @;


1.10
date	2018.01.25.22.05.16;	author -;	state -;
branches;
next	1.9;

1.9
date	2018.01.17.00.06.18;	author -;	state -;
branches;
next	1.8;

1.8
date	2016.06.24.00.20.50;	author -;	state -;
branches;
next	1.7;

1.7
date	2016.06.15.01.19.17;	author -;	state -;
branches;
next	1.6;

1.6
date	2015.07.02.23.48.18;	author -;	state -;
branches;
next	1.5;

1.5
date	2015.07.02.01.40.41;	author -;	state -;
branches;
next	1.4;

1.4
date	2015.06.29.20.46.58;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.06.26.23.51.09;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.04.09.01.41.29;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.04.09.01.36.16;	author -;	state -;
branches;
next	;


desc
@@


1.10
log
@-
@
text
@// $Id: debug.cpp,v 1.9 2018-01-16 16:06:18-08 - - $

#include <climits>
#include <iostream>
#include <vector>
using namespace std;

#include "debug.h"
#include "util.h"

vector<bool> debugflags::flags (UCHAR_MAX + 1, false);

void debugflags::setflags (const string& initflags) {
   for (const unsigned char flag: initflags) {
      if (flag == '@@') flags.assign (flags.size(), true);
                  else flags[flag] = true;
   }
   if (getflag ('x')) {
      string flag_chars;
      for (size_t index = 0; index < flags.size(); ++index) {
         if (getflag (index)) flag_chars += static_cast<char> (index);
      }
   }
}

//
// getflag -
//    Check to see if a certain flag is on.
//

bool debugflags::getflag (char flag) {
   return flags[static_cast<unsigned char> (flag)];
}

void debugflags::where (char flag, const char* file, int line,
                        const char* pretty_function) {
   note() << "DEBUG(" << flag << ") " << file << "[" << line << "] "
          << "   " << pretty_function << endl;
}

@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: debug.cpp,v 1.8 2016-06-23 17:20:50-07 - - $
d36 1
a36 1
                        const char* func) {
d38 1
a38 1
          << func << endl;
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: debug.cpp,v 1.7 2016-06-14 18:19:17-07 - - $
d38 1
a38 1
          << func << "()" << endl;
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: debug.cpp,v 1.6 2015-07-02 16:48:18-07 - - $
a17 1
   // Note that DEBUGF can trace setflags.
a22 1
      DEBUGF ('x', "debugflags::flags = " << flag_chars);
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: debug.cpp,v 1.5 2015-07-01 18:40:41-07 - - $
d9 1
a9 1
#include "general.h"
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: debug.cpp,v 1.4 2015-06-29 13:46:58-07 - - $
d39 2
a40 2
   cout << sys_info::execname() << ": DEBUG(" << flag << ") "
        << file << "[" << line << "] " << func << "()" << endl;
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: debug.cpp,v 1.3 2014-06-26 16:51:09-07 - - $
d9 1
a9 1
#include "util.h"
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: debug.cpp,v 1.2 2014-04-08 18:41:29-07 - - $
d22 1
a22 1
         if (getflag (index)) flag_chars += (char) index;
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: debug.cpp,v 1.1 2014-04-08 18:36:16-07 - - $
a2 1
#include <cassert>
d14 1
a14 1
   for (const char flag: initflags) {
d34 1
a34 4
   // WARNING: Don't TRACE this function or the stack will blow up.
   unsigned uflag = (unsigned char) flag;
   assert (uflag < flags.size());
   return flags[uflag];
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: debug.cpp,v 1.4 2014-03-26 19:49:30-07 - - $
d43 1
a43 1
   cout << execname() << ": DEBUG(" << flag << ") "
@
