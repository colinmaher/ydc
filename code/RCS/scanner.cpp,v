head	1.19;
access;
symbols;
locks;
comment	@// @;


1.19
date	2016.06.24.00.19.42;	author -;	state -;
branches;
next	1.18;

1.18
date	2016.06.23.23.00.31;	author -;	state -;
branches;
next	1.17;

1.17
date	2016.06.15.01.37.34;	author -;	state -;
branches;
next	1.16;

1.16
date	2016.06.15.01.19.17;	author -;	state -;
branches;
next	1.15;

1.15
date	2016.06.15.00.56.44;	author -;	state -;
branches;
next	1.14;

1.14
date	2016.06.15.00.54.58;	author -;	state -;
branches;
next	1.13;

1.13
date	2016.06.15.00.53.04;	author -;	state -;
branches;
next	1.12;

1.12
date	2016.06.15.00.28.33;	author -;	state -;
branches;
next	1.11;

1.11
date	2016.06.14.23.49.16;	author -;	state -;
branches;
next	1.10;

1.10
date	2016.06.14.23.46.04;	author -;	state -;
branches;
next	1.9;

1.9
date	2016.06.14.23.34.24;	author -;	state -;
branches;
next	1.8;

1.8
date	2015.07.02.23.48.18;	author -;	state -;
branches;
next	1.7;

1.7
date	2014.04.09.01.43.33;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.04.09.01.36.15;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.04.09.01.29.12;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.04.09.01.17.54;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.08.08.21.48.10;	author -;	state -;
branches;
next	1.2;

1.2
date	2012.04.11.03.46.21;	author -;	state -;
branches;
next	1.1;

1.1
date	2012.04.11.03.43.21;	author -;	state -;
branches;
next	;


desc
@@


1.19
log
@-
@
text
@// $Id: scanner.cpp,v 1.18 2016-06-23 16:00:31-07 - - $

#include <cassert>
#include <iostream>
#include <locale>
#include <stdexcept>
#include <type_traits>
#include <unordered_map>
using namespace std;

#include "scanner.h"
#include "debug.h"

char scanner::get() {
   if (not good()) throw runtime_error ("scanner::get() past EOF"); 
   char currchar = nextchar;
   nextchar = instream.get();
   return currchar;
}

token scanner::scan() {
   while (good() and isspace (nextchar)) get();
   if (not good()) return {tsymbol::SCANEOF};
   if (nextchar == '_' or isdigit (nextchar)) {
      token result {tsymbol::NUMBER, {get()}};
      while (good() and isdigit (nextchar)) result.lexinfo += get();
      return result;
   }
   return {tsymbol::OPERATOR, {get()}};
}

ostream& operator<< (ostream& out, tsymbol symbol) {
   struct hasher {
      auto operator() (tsymbol sym) const {
         return static_cast<underlying_type<tsymbol>::type> (sym);
      }
   };
   static const unordered_map<tsymbol,string,hasher> map {
      {tsymbol::NUMBER  , "NUMBER"  },
      {tsymbol::OPERATOR, "OPERATOR"},
      {tsymbol::SCANEOF , "SCANEOF" },
   };
   return out << map.at(symbol);
}

ostream& operator<< (ostream& out, const token& token) {
   out << "{" << token.symbol << ", \"" << token.lexinfo << "\"}";
   return out;
}

@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: scanner.cpp,v 1.17 2016-06-14 18:37:34-07 - - $
d25 1
a25 1
      token result {tsymbol::NUMBER, strget()};
d29 1
a29 1
   return {tsymbol::OPERATOR, strget()};
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: scanner.cpp,v 1.16 2016-06-14 18:19:17-07 - - $
d17 1
a17 1
   nextchar = cin.get();
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: scanner.cpp,v 1.15 2016-06-14 17:56:44-07 - - $
d16 2
a17 2
   char currchar = peekchar;
   peekchar = cin.get();
d22 1
a22 1
   while (good() and isspace (peekchar)) get();
d24 1
a24 1
   if (peekchar == '_' or isdigit (peekchar)) {
d26 1
a26 1
      while (good() and isdigit (peekchar)) result.lexinfo += get();
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: scanner.cpp,v 1.14 2016-06-14 17:54:58-07 - - $
d7 1
d32 12
a43 8
ostream& operator<< (ostream& out, const tsymbol symbol) {
   switch (symbol) {
      case tsymbol::NUMBER  : out << "NUMBER"  ; break;
      case tsymbol::OPERATOR: out << "OPERATOR"; break;
      case tsymbol::SCANEOF : out << "SCANEOF" ; break;
      default               : assert (false);
   }
   return out;
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: scanner.cpp,v 1.13 2016-06-14 17:53:04-07 - - $
d3 1
a5 1
#include <functional>
a6 1
#include <type_traits>
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: scanner.cpp,v 1.12 2016-06-14 17:28:33-07 - - $
d37 1
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: scanner.cpp,v 1.11 2016-06-14 16:49:16-07 - - $
d5 1
d7 2
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: scanner.cpp,v 1.10 2016-06-14 16:46:04-07 - - $
d13 3
a15 3
   char curr_char = peek_char;
   peek_char = cin.get();
   return curr_char;
d18 7
a24 12
token_t scanner::scan() {
   token_t result;
   while (good() and isspace (peek_char)) get();
   if (not good()) {
      result.symbol = tsymbol::SCANEOF;
   }else if (peek_char == '_' or isdigit (peek_char)) {
      result.symbol = tsymbol::NUMBER;
      do {
         result.lexinfo += get();
      }while (good() and isdigit (peek_char));
   }else {
      result = {tsymbol::OPERATOR, string (1, get())};
d26 1
a26 2
   DEBUGF ('s', "return " << result);
   return result;
d29 1
a29 1
ostream& operator<< (ostream& out, const tsymbol& symbol) {
d38 1
a38 1
ostream& operator<< (ostream& out, const token_t& token) {
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: scanner.cpp,v 1.9 2016-06-14 16:34:24-07 - - $
d12 1
a12 1
   if (peek_char == EOF) throw runtime_error ("scanner::get past EOF"); 
d20 2
a21 2
   while (peek_char != EOF and isspace (peek_char)) get();
   if (peek_char == EOF) {
d27 1
a27 1
      }while (peek_char != EOF and isdigit (peek_char));
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: scanner.cpp,v 1.8 2015-07-02 16:48:18-07 - - $
d12 1
a12 1
   if (peek_char == EOF) throw runtime_error ("scanner::get() past EOF"); 
d29 1
a29 2
      result.symbol = tsymbol::OPERATOR;
      result.lexinfo = get();
d31 1
d45 1
a45 1
   out << token.symbol << ": \"" << token.lexinfo << "\"";
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: scanner.cpp,v 1.7 2014-04-08 18:43:33-07 - - $
d5 1
d11 5
a15 10
scanner::scanner() {
   seen_eof = false;
   advance();
}

void scanner::advance() {
   if (not seen_eof) {
      cin.get (lookahead);
      if (cin.eof()) seen_eof = true;
   }
d20 2
a21 2
   while (not seen_eof and isspace (lookahead)) advance();
   if (seen_eof) {
d23 1
a23 1
   }else if (lookahead == '_' or isdigit (lookahead)) {
d26 2
a27 3
         result.lexinfo += lookahead;
         advance();
      }while (not seen_eof and isdigit (lookahead));
d30 1
a30 2
      result.lexinfo += lookahead;
      advance();
a31 1
   DEBUGF ('S', result);
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: scanner.cpp,v 1.6 2014-04-08 18:36:15-07 - - $
d26 1
a26 1
      result.symbol = SCANEOF;
d28 1
a28 1
      result.symbol = NUMBER;
d34 1
a34 1
      result.symbol = OPERATOR;
d42 1
a42 1
ostream& operator<< (ostream& out, const terminal_symbol& symbol) {
d44 3
a46 3
      case NUMBER  : out << "NUMBER"  ; break;
      case OPERATOR: out << "OPERATOR"; break;
      case SCANEOF : out << "SCANEOF" ; break;
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: scanner.cpp,v 1.5 2014-04-08 18:29:12-07 - - $
d10 1
a10 1
scanner::scanner () {
d15 1
a15 1
void scanner::advance () {
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: scanner.cpp,v 1.4 2014-04-08 18:17:54-07 - - $
a4 1

@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: scanner.cpp,v 1.3 2013-08-08 14:48:10-07 - - $
d9 1
a9 1
#include "trace.h"
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: scanner.cpp,v 1.2 2012-04-10 20:46:21-07 - - $
d25 1
a25 1
   while (not seen_eof && isspace (lookahead)) advance();
d28 1
a28 1
   }else if (lookahead == '_' || isdigit (lookahead)) {
d33 1
a33 1
      }while (not seen_eof && isdigit (lookahead));
d39 1
a39 1
   TRACE ('S', result);
d43 1
a43 1
ostream &operator<< (ostream &out, const terminal_symbol &symbol) {
d52 1
a52 1
ostream &operator<< (ostream &out, const token_t &token) {
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: scanner.cpp,v 1.1 2012-04-10 20:43:21-07 - - $
d17 1
a17 1
   if (! seen_eof) {
d25 1
a25 1
   while (!seen_eof && isspace (lookahead)) advance();
d33 1
a33 1
      }while (!seen_eof && isdigit (lookahead));
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: scanner.cc,v 1.1 2011-01-18 22:17:09-08 - - $
d45 3
a47 4
      #define CASE_SYMBOL(SYMBOL) case SYMBOL: out << #SYMBOL; break;
      CASE_SYMBOL (NUMBER);
      CASE_SYMBOL (OPERATOR);
      CASE_SYMBOL (SCANEOF);
@
