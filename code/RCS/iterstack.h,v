head	1.13;
access;
symbols;
locks;
comment	@ * @;


1.13
date	2014.06.27.00.21.55;	author -;	state -;
branches;
next	1.12;

1.12
date	2014.05.30.02.18.21;	author -;	state -;
branches;
next	1.11;

1.11
date	2014.05.30.02.17.50;	author -;	state -;
branches;
next	1.10;

1.10
date	2014.04.11.19.40.16;	author -;	state -;
branches;
next	1.9;

1.9
date	2014.04.09.02.04.03;	author -;	state -;
branches;
next	1.8;

1.8
date	2013.01.24.03.47.39;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.01.24.03.07.32;	author -;	state -;
branches;
next	1.6;

1.6
date	2012.04.13.02.32.54;	author -;	state -;
branches;
next	1.5;

1.5
date	2012.04.13.02.32.10;	author -;	state -;
branches;
next	1.4;

1.4
date	2012.04.13.02.29.25;	author -;	state -;
branches;
next	1.3;

1.3
date	2012.04.13.02.27.26;	author -;	state -;
branches;
next	1.2;

1.2
date	2012.04.13.00.01.35;	author -;	state -;
branches;
next	1.1;

1.1
date	2011.01.19.06.17.09;	author -;	state -;
branches;
next	;


desc
@@


1.13
log
@-
@
text
@// $Id: iterstack.h,v 1.12 2014-05-29 19:18:21-07 - - $

// 
// The class std::stack does not provide an iterator, which is
// needed for this class.  So, like std::stack, class iterstack
// is implemented on top of a container.
// 
// We use private inheritance because we want to restrict
// operations only to those few that are approved.  All functions
// are merely inherited from the container, with only ones needed
// being exported as public.
// 
// No implementation file is needed because all functions are
// inherited, and the convenience functions that are added are
// trivial, and so can be inline.
//
// Any underlying container which supports the necessary operations
// could be used, such as vector, list, or deque.
// 

#ifndef __ITERSTACK_H__
#define __ITERSTACK_H__

#include <vector>
using namespace std;

template <typename value_type>
class iterstack: private vector<value_type> {
   private:
      using stack_t = vector<value_type>;
      using stack_t::crbegin;
      using stack_t::crend;
      using stack_t::push_back;
      using stack_t::pop_back;
      using stack_t::back;
      using const_iterator = typename stack_t::const_reverse_iterator;
   public:
      using stack_t::clear;
      using stack_t::empty;
      using stack_t::size;
      inline const_iterator begin() {return crbegin();}
      inline const_iterator end() {return crend();}
      inline void push (const value_type& value) {push_back (value);}
      inline void pop() {pop_back();}
      inline const value_type& top() const {return back();}
};

#endif

@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: iterstack.h,v 1.11 2014-05-29 19:17:50-07 - - $
d30 7
a36 7
      using vector<value_type>::crbegin;
      using vector<value_type>::crend;
      using vector<value_type>::push_back;
      using vector<value_type>::pop_back;
      using vector<value_type>::back;
      using const_iterator =
            typename vector<value_type>::const_reverse_iterator;
d38 8
a45 8
      using vector<value_type>::clear;
      using vector<value_type>::empty;
      using vector<value_type>::size;
      const_iterator begin() { return crbegin(); }
      const_iterator end() { return crend(); }
      void push (const value_type& value) { push_back (value); }
      void pop() { pop_back(); }
      const value_type& top() const { return back(); }
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: iterstack.h,v 1.10 2014-04-11 12:40:16-07 - - $
d35 2
a36 1
      using const_iterator = vector<value_type>::const_reverse_iterator;
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: iterstack.h,v 1.4 2014-04-11 12:39:56-07 - - $
d35 1
a35 2
      typedef typename vector<value_type>::const_reverse_iterator
              const_iterator;
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: iterstack.h,v 1.8 2013-01-23 19:47:39-08 - - $
a37 1
      using vector<value_type>::const_reference;
d39 1
a40 1
      using vector<value_type>::empty;
d43 3
a45 3
      inline void push (const value_type& value) { push_back (value); }
      inline void pop() { pop_back(); }
      inline const value_type& top() const { return back(); }
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: iterstack.h,v 1.7 2013-01-23 19:07:32-08 - - $
a24 1

d29 8
a38 3
      using vector<value_type>::const_reverse_iterator;
      using vector<value_type>::push_back;
      using vector<value_type>::pop_back;
a39 1
      using vector<value_type>::back;
d42 3
a44 3
      using vector<value_type>::rbegin;
      using vector<value_type>::rend;
      inline void push (const value_type &value) { push_back (value); }
d46 1
a46 1
      inline const value_type &top() const { return back(); }
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: iterstack.h,v 1.6 2012-04-12 19:32:54-07 - - $
d24 1
a24 1
#include <list>
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: iterstack.h,v 1.5 2012-04-12 19:32:10-07 - - $
d16 3
d29 1
a29 1
class iterstack: private list<value_type> {
d31 10
a40 10
      using list<value_type>::const_reference;
      using list<value_type>::const_reverse_iterator;
      using list<value_type>::push_back;
      using list<value_type>::pop_back;
      using list<value_type>::clear;
      using list<value_type>::back;
      using list<value_type>::size;
      using list<value_type>::empty;
      using list<value_type>::rbegin;
      using list<value_type>::rend;
d43 1
a43 2
      inline value_type& top() { return back(); }
      inline const value_type& top() const { return back(); }
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: iterstack.h,v 1.4 2012-04-12 19:29:25-07 - - $
d38 4
a41 4
      inline void push (const value_type &value) {push_back (value); }
      inline void pop() {pop_back(); }
      inline value_type& top() {back(); }
      inline const value_type& top() const {back(); }
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: iterstack.h,v 1.3 2012-04-12 19:27:26-07 - - $
d38 4
a41 4
      void push (const value_type &value) {push_back (value); }
      void pop() {pop_back(); }
      value_type& top() {back(); }
      const value_type& top() const {back(); }
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: iterstack.h,v 1.2 2012-04-12 17:01:35-07 - - $
d21 1
a21 1
#include <deque>
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: iterstack.h,v 1.1 2011-01-18 22:17:09-08 - - $
d6 1
a6 1
// is implemented on top of a std::deque.
d10 1
a10 1
// are merely inherited from deque, with only the needed ones
d14 2
a15 2
// inherited.  Another possibility is to base iterstack on vector
// instead of on deque.
d25 2
a26 2
template <typename item_t>
class iterstack: private deque<item_t> {
d28 14
a41 10
      using deque<item_t>::const_reference;
      using deque<item_t>::const_reverse_iterator;
      using deque<item_t>::push_back;
      using deque<item_t>::pop_back;
      using deque<item_t>::clear;
      using deque<item_t>::back;
      using deque<item_t>::size;
      using deque<item_t>::empty;
      using deque<item_t>::rbegin;
      using deque<item_t>::rend;
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: iterstack.h,v 1.2 2011-01-18 21:27:24-08 - - $
d3 14
a16 14
//
// The class std::stack does not provide an iterator, which is needed
// for this class.  So, like std::stack, class iterstack is implemented
// on top of a std::deque.  We don't use a deque directly because we
// want to restrict operations.
//
// All functions are merely forwarded to the deque as inline functions
// for efficiency.  For detailed documentation of the functions see
// std::deque.
//
// No implementation file is needed because all functions are inline.
// Inline functions are only a good idea for trivial forwarding
// functions.
//
d26 1
a26 3
class iterstack {
   private:
      deque<item_t> data;
d28 10
a37 10
      typedef typename deque<item_t>::const_reference const_reference;
      typedef typename deque<item_t>::const_iterator const_iterator;
      void push_front (const item_t &item) { data.push_front (item); }
      void pop_front ()                    { data.pop_front (); }
      void clear ()                        { data.clear (); }
      const_reference front () const       { return data.front (); }
      size_t size () const                 { return data.size (); }
      bool empty () const                  { return data.empty (); }
      const_iterator begin () const        { return data.begin (); }
      const_iterator end () const          { return data.end (); }
@
