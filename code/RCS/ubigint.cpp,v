head	1.14;
access;
symbols;
locks;
comment	@// @;


1.14
date	2016.06.24.00.21.26;	author -;	state -;
branches;
next	1.13;

1.13
date	2016.06.23.23.00.31;	author -;	state -;
branches;
next	1.12;

1.12
date	2016.04.04.20.07.41;	author -;	state -;
branches;
next	1.11;

1.11
date	2016.03.25.02.57.29;	author -;	state -;
branches;
next	1.10;

1.10
date	2016.03.25.02.43.57;	author -;	state -;
branches;
next	1.9;

1.9
date	2016.03.25.02.30.57;	author -;	state -;
branches;
next	1.8;

1.8
date	2015.07.03.21.46.41;	author -;	state -;
branches;
next	1.7;

1.7
date	2015.07.02.23.48.18;	author -;	state -;
branches;
next	1.6;

1.6
date	2015.07.02.23.03.36;	author -;	state -;
branches;
next	1.5;

1.5
date	2015.07.02.01.52.26;	author -;	state -;
branches;
next	1.4;

1.4
date	2015.07.02.01.40.41;	author -;	state -;
branches;
next	1.3;

1.3
date	2015.07.02.01.09.31;	author -;	state -;
branches;
next	1.2;

1.2
date	2015.07.01.21.27.23;	author -;	state -;
branches;
next	1.1;

1.1
date	2015.07.01.21.16.19;	author -;	state -;
branches;
next	;


desc
@@


1.14
log
@-
@
text
@// $Id: ubigint.cpp,v 1.13 2016-06-23 16:00:31-07 - - $

#include <cctype>
#include <cstdlib>
#include <exception>
#include <stack>
#include <stdexcept>
using namespace std;

#include "ubigint.h"
#include "debug.h"

ubigint::ubigint (unsigned long that): uvalue (that) {
   DEBUGF ('~', this << " -> " << uvalue)
}

ubigint::ubigint (const string& that): uvalue(0) {
   DEBUGF ('~', "that = \"" << that << "\"");
   for (char digit: that) {
      if (not isdigit (digit)) {
         throw invalid_argument ("ubigint::ubigint(" + that + ")");
      }
      uvalue = uvalue * 10 + digit - '0';
   }
}

ubigint ubigint::operator+ (const ubigint& that) const {
   return ubigint (uvalue + that.uvalue);
}

ubigint ubigint::operator- (const ubigint& that) const {
   if (*this < that) throw domain_error ("ubigint::operator-(a<b)");
   return ubigint (uvalue - that.uvalue);
}

ubigint ubigint::operator* (const ubigint& that) const {
   return ubigint (uvalue * that.uvalue);
}

void ubigint::multiply_by_2() {
   uvalue *= 2;
}

void ubigint::divide_by_2() {
   uvalue /= 2;
}


struct quo_rem { ubigint quotient; ubigint remainder; };
quo_rem udivide (const ubigint& dividend, ubigint divisor) {
   // Note: divisor is modified so pass by value (copy).
   ubigint zero {0};
   if (divisor == zero) throw domain_error ("udivide by zero");
   ubigint power_of_2 {1};
   ubigint quotient {0};
   ubigint remainder {dividend}; // left operand, dividend
   while (divisor < remainder) {
      divisor.multiply_by_2();
      power_of_2.multiply_by_2();
   }
   while (power_of_2 > zero) {
      if (divisor <= remainder) {
         remainder = remainder - divisor;
         quotient = quotient + power_of_2;
      }
      divisor.divide_by_2();
      power_of_2.divide_by_2();
   }
   return {.quotient = quotient, .remainder = remainder};
}

ubigint ubigint::operator/ (const ubigint& that) const {
   return udivide (*this, that).quotient;
}

ubigint ubigint::operator% (const ubigint& that) const {
   return udivide (*this, that).remainder;
}

bool ubigint::operator== (const ubigint& that) const {
   return uvalue == that.uvalue;
}

bool ubigint::operator< (const ubigint& that) const {
   return uvalue < that.uvalue;
}

ostream& operator<< (ostream& out, const ubigint& that) { 
   return out << "ubigint(" << that.uvalue << ")";
}

@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.cpp,v 1.12 2016-04-04 13:07:41-07 - - $
d18 1
a18 1
   DEBUGF ('~', "arg that = \"" << that << "\"");
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.cpp,v 1.11 2016-03-24 19:57:29-07 - - $
d3 1
d18 1
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.cpp,v 1.10 2016-03-24 19:43:57-07 - - $
d17 6
a22 1
   for (char digit: that) uvalue = uvalue * 10 + digit - '0';
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.cpp,v 1.9 2016-03-24 19:30:57-07 - - $
d45 2
a46 1
   if (divisor == 0) throw domain_error ("udivide by zero");
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.cpp,v 1.8 2015-07-03 14:46:41-07 - - $
d42 9
a50 17
ubigint ubigint::operator/ (const ubigint& that) const {
   return udivide (*this, that).quotient;
}

ubigint ubigint::operator% (const ubigint& that) const {
   return udivide (*this, that).remainder;
}

quo_rem udivide (const ubigint& dividend, const ubigint& divisor) {
   static const ubigint zero = 0;
   if (divisor == zero) throw domain_error ("udivide by zero");
   ubigint power_of_2 = 1;
   ubigint divisor_ = divisor; // right operand, divisor
   ubigint quotient = 0;
   ubigint remainder = dividend; // left operand, dividend
   while (divisor_ < remainder) {
      divisor_.multiply_by_2();
d54 2
a55 2
      if (divisor_ <= remainder) {
         remainder = remainder - divisor_;
d58 1
a58 1
      divisor_.divide_by_2();
d62 8
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.cpp,v 1.7 2015-07-02 16:48:18-07 - - $
d42 9
a50 1
ubigint::quot_rem ubigint::divide (const ubigint& that) const {
d52 1
a52 1
   if (that == zero) throw domain_error ("ubigint::divide: by 0");
d54 1
a54 1
   ubigint divisor = that; // right operand, divisor
d56 3
a58 3
   ubigint remainder = *this; // left operand, dividend
   while (divisor < remainder) {
      divisor.multiply_by_2();
d62 2
a63 2
      if (divisor <= remainder) {
         remainder = remainder - divisor;
d66 1
a66 1
      divisor.divide_by_2();
d69 1
a69 9
   return {quotient, remainder};
}

ubigint ubigint::operator/ (const ubigint& that) const {
   return divide (that).first;
}

ubigint ubigint::operator% (const ubigint& that) const {
   return divide (that).second;
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.cpp,v 1.6 2015-07-02 16:03:36-07 - - $
a19 7
ubigint::operator long() const {
   if (*this <= ubigint (numeric_limits<long>::min())
    or *this > ubigint (numeric_limits<long>::max()))
               throw range_error ("ubigint::long(): out of range");
   return uvalue;
}

d81 1
a81 2
   out << that.uvalue;
   return out;
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.cpp,v 1.5 2015-07-01 18:52:26-07 - - $
d16 9
a24 5
ubigint::ubigint (const string& that) {
   auto itor = that.cbegin();
   int newval = 0;
   while (itor != that.end()) newval = newval * 10 + *itor++ - '0';
   DEBUGF ('~', this << " -> " << uvalue)
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.cpp,v 1.4 2015-07-01 18:40:41-07 - - $
a31 7
unsigned long ubigint::to_unsigned_long() const {
   if (*this <= ubigint (numeric_limits<unsigned long>::min())
    or *this > ubigint (numeric_limits<unsigned long>::max()))
               throw range_error ("ubigint_to_unsigned long");
   return uvalue;
}

d46 2
a47 2
   if (that == 0) throw domain_error ("ubigint::divide: by 0");
   ubigint zero = 0;
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.cpp,v 1.2 2015-07-01 14:27:23-07 - - $
d51 1
@


1.3
log
@-
@
text
@d23 2
a24 3

ubigint operator+ (const ubigint& left, const ubigint& right) {
   return left.uvalue + right.uvalue;
d27 3
a29 2
ubigint operator- (const ubigint& left, const ubigint& right) {
   return left.uvalue - right.uvalue;
d39 2
a40 2
bool abs_less (const long& left, const long& right) {
   return left < right;
d43 18
a60 32
//
// Multiplication algorithm.
//
ubigint operator* (const ubigint& left, const ubigint& right) {
   return left.uvalue * right.uvalue;
}

//
// Division algorithm.
//

void multiply_by_2 (ubigint::unumber& unumber_value) {
   unumber_value *= 2;
}

void divide_by_2 (ubigint::unumber& unumber_value) {
   unumber_value /= 2;
}


ubigint::quot_rem divide (const ubigint& left, const ubigint& right) {
   if (right == 0) throw domain_error ("divide by 0");
   using unumber = unsigned long;
   static unumber zero = 0;
   if (right == 0) throw domain_error ("ubigint::divide");
   unumber divisor = right.uvalue;
   unumber quotient = 0;
   unumber remainder = left.uvalue;
   unumber power_of_2 = 1;
   while (abs_less (divisor, remainder)) {
      multiply_by_2 (divisor);
      multiply_by_2 (power_of_2);
d62 2
a63 2
   while (abs_less (zero, power_of_2)) {
      if (not abs_less (remainder, divisor)) {
d67 2
a68 2
      divide_by_2 (divisor);
      divide_by_2 (power_of_2);
d73 2
a74 2
ubigint operator/ (const ubigint& left, const ubigint& right) {
   return divide (left, right).first;
d77 2
a78 2
ubigint operator% (const ubigint& left, const ubigint& right) {
   return divide (left, right).second;
d81 2
a82 2
bool operator== (const ubigint& left, const ubigint& right) {
   return left.uvalue == right.uvalue;
d85 2
a86 2
bool operator< (const ubigint& left, const ubigint& right) {
   return left.uvalue < right.uvalue;
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.cpp,v 1.1 2015-07-01 14:16:19-07 - - $
d103 5
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: bigint.cpp,v 1.64 2015-07-01 13:34:59-07 - - $
d9 1
a9 1
#include "bigint.h"
d12 2
a13 2
bigint::bigint (unsigned long that): long_value (that) {
   DEBUGF ('~', this << " -> " << long_value)
d16 1
a16 1
bigint::bigint (const string& that) {
d20 1
a20 1
   DEBUGF ('~', this << " -> " << long_value)
d24 2
a25 2
bigint operator+ (const bigint& left, const bigint& right) {
   return left.long_value + right.long_value;
d28 2
a29 2
bigint operator- (const bigint& left, const bigint& right) {
   return left.long_value - right.long_value;
d32 5
a36 13
bigint operator+ (const bigint& right) {
   return +right.long_value;
}

bigint operator- (const bigint& right) {
   return -right.long_value;
}

long bigint::to_long() const {
   if (*this <= bigint (numeric_limits<long>::min())
    or *this > bigint (numeric_limits<long>::max()))
               throw range_error ("bigint_to_long: out of range");
   return long_value;
d46 2
a47 2
bigint operator* (const bigint& left, const bigint& right) {
   return left.long_value * right.long_value;
d54 1
a54 1
void multiply_by_2 (bigint::unumber& unumber_value) {
d58 1
a58 1
void divide_by_2 (bigint::unumber& unumber_value) {
d63 1
a63 1
bigint::quot_rem divide (const bigint& left, const bigint& right) {
d67 2
a68 2
   if (right == 0) throw domain_error ("bigint::divide");
   unumber divisor = right.long_value;
d70 1
a70 1
   unumber remainder = left.long_value;
d87 1
a87 1
bigint operator/ (const bigint& left, const bigint& right) {
d91 1
a91 1
bigint operator% (const bigint& left, const bigint& right) {
d95 2
a96 6
bool operator== (const bigint& left, const bigint& right) {
   return left.long_value == right.long_value;
}

bool operator< (const bigint& left, const bigint& right) {
   return left.long_value < right.long_value;
d99 2
a100 3
ostream& operator<< (ostream& out, const bigint& that) {
   out << that.long_value;
   return out;
a102 23

bigint pow (const bigint& base, const bigint& exponent) {
   DEBUGF ('^', "base = " << base << ", exponent = " << exponent);
   if (base == 0) return 0;
   bigint base_copy = base;
   long expt = exponent.to_long();
   bigint result = 1;
   if (expt < 0) {
      base_copy = 1 / base_copy;
      expt = - expt;
   }
   while (expt > 0) {
      if (expt & 1) { //odd
         result = result * base_copy;
         --expt;
      }else { //even
         base_copy = base_copy * base_copy;
         expt /= 2;
      }
   }
   DEBUGF ('^', "result = " << result);
   return result;
}
@
