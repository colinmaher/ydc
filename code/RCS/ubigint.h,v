head	1.11;
access;
symbols;
locks;
comment	@ * @;


1.11
date	2016.03.25.02.43.57;	author -;	state -;
branches;
next	1.10;

1.10
date	2016.03.25.02.30.57;	author -;	state -;
branches;
next	1.9;

1.9
date	2015.07.03.21.46.41;	author -;	state -;
branches;
next	1.8;

1.8
date	2015.07.02.23.48.18;	author -;	state -;
branches;
next	1.7;

1.7
date	2015.07.02.23.03.36;	author -;	state -;
branches;
next	1.6;

1.6
date	2015.07.02.22.52.45;	author -;	state -;
branches;
next	1.5;

1.5
date	2015.07.02.01.59.12;	author -;	state -;
branches;
next	1.4;

1.4
date	2015.07.02.01.52.26;	author -;	state -;
branches;
next	1.3;

1.3
date	2015.07.02.01.40.41;	author -;	state -;
branches;
next	1.2;

1.2
date	2015.07.01.21.27.23;	author -;	state -;
branches;
next	1.1;

1.1
date	2015.07.01.21.16.19;	author -;	state -;
branches;
next	;


desc
@@


1.11
log
@-
@
text
@// $Id: ubigint.h,v 1.10 2016-03-24 19:30:57-07 - - $

#ifndef __UBIGINT_H__
#define __UBIGINT_H__

#include <exception>
#include <iostream>
#include <limits>
#include <utility>
using namespace std;

#include "debug.h"
#include "relops.h"

class ubigint {
   friend ostream& operator<< (ostream&, const ubigint&);
   private:
      using unumber = unsigned long;
      unumber uvalue {};
   public:
      void multiply_by_2();
      void divide_by_2();

      ubigint() = default; // Need default ctor as well.
      ubigint (unsigned long);
      ubigint (const string&);

      ubigint operator+ (const ubigint&) const;
      ubigint operator- (const ubigint&) const;
      ubigint operator* (const ubigint&) const;
      ubigint operator/ (const ubigint&) const;
      ubigint operator% (const ubigint&) const;

      bool operator== (const ubigint&) const;
      bool operator<  (const ubigint&) const;
};

#endif

@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.h,v 1.9 2015-07-03 14:46:41-07 - - $
a36 3

struct quo_rem { ubigint quotient; ubigint remainder; };
quo_rem udivide (const ubigint& dividend, const ubigint& divisor);
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.h,v 1.8 2015-07-02 16:48:18-07 - - $
a17 1
      using quot_rem = pair<ubigint,ubigint>;
d20 1
a20 1
      quot_rem divide (const ubigint&) const;
a22 1
   public:
d37 3
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.h,v 1.7 2015-07-02 16:03:36-07 - - $
a28 1
      operator long() const;
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.h,v 1.6 2015-07-02 15:52:45-07 - - $
d29 1
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.h,v 1.5 2015-07-01 18:59:12-07 - - $
a25 3
      //
      // Extra ctors to make ubigints.
      //
a28 1
      unsigned long to_unsigned_long() const;
a29 3
      //
      // Basic add/sub operators.
      //
a31 4

      //
      // Extended operators implemented with add/sub.
      //
a35 3
      //
      // Comparison operators.
      //
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.h,v 1.4 2015-07-01 18:52:26-07 - - $
d13 1
a13 1
#include "rel_ops.h"
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.h,v 1.3 2015-07-01 18:40:41-07 - - $
d29 1
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.h,v 1.2 2015-07-01 14:27:23-07 - - $
a14 3
//
// Define class ubigint
//
a26 10
      // Ensure synthesized members are genrated.
      //
      ubigint() = default;
      ubigint (const ubigint&) = default;
      ubigint (ubigint&&) = default;
      ubigint& operator= (const ubigint&) = default;
      ubigint& operator= (ubigint&&) = default;
      ~ubigint() = default;

      //
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.h,v 1.1 2015-07-01 14:16:19-07 - - $
d19 1
a19 2
      friend class bigint;
      friend ostream& operator<< (ostream&, const ubigint&);
d24 3
a26 3
      friend quot_rem divide (const ubigint&, const ubigint&);
      friend void multiply_by_2 (unumber&);
      friend void divide_by_2 (unumber&);
d49 3
a51 3
      friend ubigint operator+ (const ubigint&, const ubigint&);
      friend ubigint operator- (const ubigint&, const ubigint&);

d55 3
a57 3
      friend ubigint operator* (const ubigint&, const ubigint&);
      friend ubigint operator/ (const ubigint&, const ubigint&);
      friend ubigint operator% (const ubigint&, const ubigint&);
d62 2
a63 2
      friend bool operator== (const ubigint&, const ubigint&);
      friend bool operator<  (const ubigint&, const ubigint&);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: ubigint.h,v 1.19 2015-07-01 13:34:59-07 - - $
d13 1
d24 1
a24 1
      unumber value {};
d45 1
a51 1
      unsigned long to_unsigned_long() const;
@
