head	1.4;
access;
symbols;
locks;
comment	@// @;


1.4
date	2015.07.03.21.46.41;	author -;	state -;
branches;
next	1.3;

1.3
date	2015.07.02.23.48.18;	author -;	state -;
branches;
next	1.2;

1.2
date	2015.07.02.23.03.36;	author -;	state -;
branches;
next	1.1;

1.1
date	2015.07.02.22.52.45;	author -;	state -;
branches;
next	;


desc
@@


1.4
log
@-
@
text
@// $Id: libfns.cpp,v 1.3 2015-07-02 16:48:18-07 - - $

#include "libfns.h"

//
// This algorithm would be more efficient with operators
// *=, /=2, and is_odd.  But we leave it here.
//

bigint pow (const bigint& base_arg, const bigint& exponent_arg) {
   bigint base (base_arg);
   bigint exponent (exponent_arg);
   static const bigint ZERO (0);
   static const bigint ONE (1);
   static const bigint TWO (2);
   DEBUGF ('^', "base = " << base << ", exponent = " << exponent);
   if (base == ZERO) return ZERO;
   bigint result = ONE;
   if (exponent < ZERO) {
      base = ONE / base;
      exponent = - exponent;
   }
   while (exponent > ZERO) {
      if (exponent % TWO == ONE) {
         result = result * base;
         exponent = exponent - 1;
      }else {
         base = base * base;
         exponent = exponent / 2;
      }
   }
   DEBUGF ('^', "result = " << result);
   return result;
}

@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: libfns.cpp,v 1.2 2015-07-02 16:03:36-07 - - $
d5 11
a15 2
bigint pow (const bigint& base, const bigint& exponent) {
   static const bigint zero = 0;
d17 5
a21 7
   if (base == zero) return zero;
   bigint base_copy = base;
   long expt = exponent;
   bigint result = 1;
   if (expt < 0) {
      base_copy = 1 / base_copy;
      expt = - expt;
d23 7
a29 7
   while (expt > 0) {
      if (expt & 1) { //odd
         result = result * base_copy;
         --expt;
      }else { //even
         base_copy = base_copy * base_copy;
         expt /= 2;
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: libfns.cpp,v 1.1 2015-07-02 15:52:45-07 - - $
d10 1
a10 1
   long expt = long (exponent);
d13 1
a13 1
      base_copy = bigint (1) / base_copy;
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id$
d6 1
d8 1
a8 1
   if (base == 0) return 0;
d10 1
a10 1
   long expt = exponent.to_long();
@
